#install.packages("devtools")
#devtools::install_github("mjg211/multiarm")

##################################   Obtaining the MAMS design     #####################################################

library(multiarm)


flatten <- function(lst) 
{
  do.call(c, lapply(lst, function(x) if(is.list(x)) flatten(x) else list(x)))
}


simulating                    <- function(K, J, delta1, spacing, power_control, condition, tmax, m0) 
{
  ratio=c(1)
  sigma=c(1,1)
  condition= condition                                                           #or,"All treatment effective", "No treatment effective" or "kth treatment effective"
  k_star=1
  design <- des_gs_norm(K              = K,                                       # No. of arms
                        J              = J,                                       # No. of stages
                        stopping       = "separate",                              # stopping rule = "separate" or "simultaneous"
                        type           = "variable",                              # stage wise sample size = "fixed" or "variable"
                        alpha          = 0.05,
                        beta           = 0.2,
                        delta1         = delta1,                                  # interesting treatment effect
                        delta0         = 0,                                       # uninteresting treatment effect  
                        sigma          = sigma,                                   # SDs across different arms
                        ratio          = ratio,                                   # allocation ratio
                        power          = power_control,                           # Type of power control = "conjunctive", "disjunctive", "marginal"
                        fshape         = "obf",                                   # boundary shape = "fixed", "obf","pocock","triangular"
                        eshape         = "obf",
                        spacing        = spacing,
                        ffix           = -3,
                        efix           = 3,
                        integer        = FALSE)
  
  n1           <- design$n1                                                       # First stage sample size
  n10          <- design$n10                                                      # First stage control arm sample size
  nmax         <- design$maxN                                                     # Maximum sample size
  nC           <- n10*spacing/spacing[1]
  for(j in 2:J)
    nC[j]      <- nC[j]-sum(nC[1:(j-1)])        
  nE           <- nC*ratio
  
  
  
  ############################    Obtaining omegas and computing the number of treatments in every stage     #########################################
  
  omega        <- iterpc::getall(iterpc::iterpc(J, K, ordered = TRUE,             # All possible values of omegas/ stages where one 
                                                replace = TRUE))                  # or multiple treatment arms are dropped due to futility/efficacy
  max_omega_Js <- apply(omega[1:nrow(omega),], 1, max)                            # max no. stages reached for that particular omega
  K_Js                 <- n_Js     <- list()                                      # Number of treatment arms and corresponding sample size for the jth stage 
  n_pipeline_uniform   <- n_pipeline_linear    <-list()                           # Number of pipelines under uniform and linear recruitment assumption for all omegas
  total_n_Js           <- numeric(nrow(omega))                                    # possible sample size for the particular values of omega
  
  for (j in 1:nrow(omega))
  {
    K_Js[[j]]                   <- numeric(max_omega_Js[j])
    n_Js[[j]]                   <- numeric(max_omega_Js[j])
    K_Js[[j]][1]                <- K+1                                            # The first stage will always have K treatment and one control arm
    n_Js[[j]][1]                <- n1                                             # first stage sample size
    K_Js[[j]][max_omega_Js[j]]  <- sum(omega[j,]==max_omega_Js[j])+1              # no. of treatment arms remaining in the last stage(lies between 2:K+1)
    n_Js[[j]][max_omega_Js[j]]  <- nC[max_omega_Js[j]]+
                                  (K_Js[[j]][max_omega_Js[j]]-1)*nE[max_omega_Js[j]]
    #n_Js[[j]][max_omega_Js[j]]  <- ratio[1]*n10*K_Js[[j]][max_omega_Js[j]]        # associated sample size in the last stage
    if(max_omega_Js[j]>2)
    {
      for (i in 2:(max_omega_Js[j]-1))
      {
        K_Js[[j]][i]              <- K_Js[[j]][i-1]- sum(omega[j,]==(i-1))        # determining no. of treatment arms present in ith stage for jth omega combination
        n_Js[[j]][i]              <- nC[i]+(K_Js[[j]][i]-1)*nE[i]                   # associated sample size for ith stage 
      }
    }
    total_n_Js                   <- sapply(n_Js, sum) 
    final_realised_stage         <- sapply(K_Js, length)                          # final stage no. for omega_j, may be less than J
  }
  
  
  
  
  ###################    Different scenarios for treatment effect present/ absent   #############################################################
  
  
  tau                     <- numeric(J*K)                                         # Mean vector for K treatment arms for J stages
  
  if(condition=="All treatment effective")
    tau                   <- rep(delta1,J*K)
  if( condition=="No treatment effective")
    tau                   <- rep(0,J*K)
  if(condition=="kth treatment effective")
  {
    k_star                <- k_star
    for(j in (1+k_star*J-J):(k_star*J))
      tau[j]            <- delta1
  }
  
  #if(condition=="LFC")o
  #{
  #tau                 <-matrix(0, nrow=K, ncol=J*K)
  #for(k in 1:K)
  #{
  # for(j in (1+k*J-J):(k*J))
  #  tau[k,j]   <- delta1
  #}
  #}
  
  
  ##################    computing the stopping probabilities      ##############################################################################
  
  
  stopping_probability    <- list()
  lower_bounds            <- upper_bounds            <- list(nrow(omega))
  tau_indices             <- covariance_matrices     <- list(nrow(omega))
  master_cov_matrix       <- matrix(0, nrow=J*K, ncol = J*K) 
  n_0                     <- n10*spacing/spacing[1]                                                   # stage wise control arm sample sizes
  n_k                     <- list()                                               # stage wise experimental arm sample sizes
  sigma_0                 <- sigma[1]                                             # control arm variance
  sigma_k                 <- rep(sigma[2],K)                                      # experimental arm variances [need to update if sigma changes]
  sqrt_I                  <- numeric(J*K)                                         # sqrt of information
  
  
  
  # The square root of Information for all JxK combination
  for(j in 1:J)
  {
    for( k in 1:K)
    {
      n_k[[k]]             <- ratio[1]*n_0
      sqrt_I[(k - 1)*J + j]<- sqrt(1/(sigma_0^2/n_0[j] + sigma_k[k]^2/n_k[[k]][j]))
    }
  }
  
  
  # function to compute the covariance between z_j1k1 and z_j2k2
  
  covariance          <- function(j1,j2,k1,k2)
  {
    cov_k1_k2         <- cov          <- numeric()
    if(k1==k2)
    {
      if(j1>=j2)
        cov_k1_k2         <- (sigma_k[k1]^2/n_k[[k1]][j1])+(sigma_0^2/n_0[j1])
      else
        cov_k1_k2         <- (sigma_k[k1]^2/n_k[[k1]][j2])+(sigma_0^2/n_0[j2])
    }
    else
    {
      if(j1>=j2)
        cov_k1_k2         <- sigma_0^2/n_0[j1]
      else
        cov_k1_k2         <- sigma_0^2/n_0[j2]
    }
    cov               <- 1/sqrt((sigma_k[k1]^2/n_k[[k1]][j1])+(sigma_0^2/n_0[j1]))*
      1/sqrt((sigma_k[k2]^2/n_k[[k2]][j2])+(sigma_0^2/n_0[j2]))*cov_k1_k2
    return(cov)
  }
  
  
  # computing the covariance matrix of order (JKxJK) if all arms were present at all stage
  for (j1 in 1:J) 
  {
    for (k1 in 1:K) 
    {
      for (j2 in 1:J) 
      {
        for (k2 in 1:K) 
        {
          row_i                  <- (k1 - 1)*J + j1
          col_i                  <- (k2 - 1)*J + j2
          master_cov_matrix[row_i, col_i] <- covariance(j1,j2,k1,k2)
        }
      }
    }
  }
  
  
  
  
  # Computing the stopping boundaries for all cases of omega and psi
  
  
  for(i in 1: nrow(omega))
  {
    l_i                       <- rep(design$f,K)
    u_i                       <- rep(design$e,K)
    tau_jk                    <- matrix(0,nrow=J,ncol=K)                                  # to find the tau_indices
    binary                    <- list(K)
    for(k in 1:K)
    {
      tau_jk[,k]              <- c(rep(TRUE,omega[i,k]), rep(FALSE,(J-omega[i,k])))       # indicates if the k^th arm is present is the j^th stage 
      binary[[k]]             <- c(0,1)
    }
    tau_indices[[i]]          <- c(tau_jk[,1:K])                                          #vector of 0s and 1s describing the presence/ absence of K treatment arms for one omega
    psi                       <- expand.grid(binary)                                      # All possible psi_is for K treatment arms
    l_i                       <- l_i[tau_indices[[i]]==1]
    u_i                       <- u_i[tau_indices[[i]]==1]
    lower_bounds[[i]]         <- list(nrow(psi))
    upper_bounds[[i]]         <- list(nrow(psi))
    covariance_matrices[[i]]  <- master_cov_matrix[tau_indices[[i]]==1,tau_indices[[i]]==1]
    for(psi_i in 1: nrow(psi))
    {
      lower_bounds[[i]][[psi_i]]   <- l_i
      upper_bounds[[i]][[psi_i]]   <- u_i
      for(k in 1: K)
      {
        if(psi[psi_i,k]==0)
        {
          lower_bounds[[i]][[psi_i]][sum(omega[i,1:k])]   <- -Inf
          upper_bounds[[i]][[psi_i]][sum(omega[i,1:k])]   <- design$f[omega[i,k]]
        }
        
        if(psi[psi_i,k]==1)
        {
          lower_bounds[[i]][[psi_i]][sum(omega[i,1:k])]   <- design$e[omega[i,k]]
          upper_bounds[[i]][[psi_i]][sum(omega[i,1:k])]   <- Inf
        }
        
      }
    }
    
  }
  
  

  for(i in 1: nrow(omega))
  {
    stopping_probability[[i]]         <-numeric(nrow(psi))
    for(l in 1:nrow(psi))
      stopping_probability[[i]][l]   <- mvtnorm::pmvnorm(lower= lower_bounds[[i]][[l]], 
                                                         upper= upper_bounds[[i]][[l]],
                                                         mean = tau[tau_indices[[i]]==1]*sqrt_I[tau_indices[[i]]==1],
                                                         sigma= covariance_matrices[[i]])[1]
    
  }
  
  #}
  
  
  
  ###################    computing the number of pipelines     ######################################################################
  
  
  
  pipelines                      <- function(J, j, delay, recruitment_length, recruitment_type)
  {
    n_j                          <- n_Js[[j]]                                     # stage wise sample size for one particular omega
    k_j                          <- K_Js[[j]]                                     # stage wise no. of treatment arms
    nC                           <- nC
    nE                           <- nE
    n_pipeline                   <- numeric(final_realised_stage[j]) 
    n_overrun                    <- numeric(final_realised_stage[j])
    nmax_possible                <- numeric(final_realised_stage[j])              # maximum sample size at stage j: depends on the the no. of treatment arms present in stage j (the max. value the pipelines can take)
    t_j                          <- numeric(final_realised_stage[j])
    tmax_possible                <- numeric(final_realised_stage[j])              # maximum sample size at stage j: depends on the the no. of treatment arms present in stage j (the max. value the pipelines can take)
    t_j_tilde                    <- numeric(final_realised_stage[j]) 
    if(J==2)
    {
      nmax_possible[1]             <- nmax 
      if(recruitment_type=="Uniform")
      {
          lambda                     <- nmax/recruitment_length
          t_j[1]                     <- n_j[1]/lambda
          tmax_possible[1]           <- nmax_possible[1]/lambda
      }
      else if(recruitment_type=="Linear")
      {
          delta                      <- 2*nmax/(recruitment_length*(recruitment_length+1))
          t_j[1]                     <- (-1+sqrt(1+4*2*n_j[1]/delta))/2
          tmax_possible[1]           <- (-1+sqrt(1+4*2*nmax_possible[1]/delta))/2
      }
      t_j_tilde[1]                   <- t_j[1]+delay
      if(t_j_tilde[1]>=tmax_possible[1])
          t_j_tilde[1]               <- tmax_possible[1]
      else
          t_j_tilde[1]               <- t_j_tilde[1]
      if(recruitment_type=="Uniform")
          n_pipeline[1]              <- (t_j_tilde[1]-t_j[1])*lambda
      else if (recruitment_type=="Linear")
          n_pipeline[1]              <- 0.5*delta*(t_j_tilde[1]*(t_j_tilde[1]+1)-t_j[1]*(t_j[1]+1))
      n_overrun[1]                   <- n_j[1]+n_pipeline[1]-sum(n_j)
      n_overrun[2]                   <- 0
    }
    
    
    if(J>2)
    {
      #nmax_possible[1]=nmax
      if(final_realised_stage[j]<J)
      {
        for(i in 1:final_realised_stage[j])
        {
          nmax_possible[i]           <- sum(n_j[1:i])+(k_j[i]-1)*sum(nE[(i+1):J])+sum(nC[(i+1):J])
          if(recruitment_type=="Uniform")
          {
            lambda                     <- nmax/recruitment_length
            t_j[i]                     <- sum(n_j[1:i])/lambda
            tmax_possible[i]           <- nmax_possible[i]/lambda
          }
          else if(recruitment_type=="Linear")
          {
            delta                      <- 2*nmax/(recruitment_length*(recruitment_length+1))
            t_j[i]                     <- (-1+sqrt(1+4*2*sum(n_j[1:i])/delta))/2
            tmax_possible[i]           <- (-1+sqrt(1+4*2*nmax_possible[i]/delta))/2
          }
          t_j_tilde[i]               <- t_j[i]+delay
          if(t_j_tilde[i]>=tmax_possible[i])
          {
            #if(k_j[i]==K)
            # t_j_tilde[i]           <- recruitment_length
            #else
            t_j_tilde[i]           <- tmax_possible[i]
          }
          else
            t_j_tilde[i]             <- t_j_tilde[i]
          if(recruitment_type=="Uniform")
            n_pipeline[i]              <- (t_j_tilde[i]-t_j[i])*lambda
          else if (recruitment_type=="Linear")
            n_pipeline[i]              <- 0.5*delta*(t_j_tilde[i]*(t_j_tilde[i]+1)-t_j[i]*(t_j[i]+1))
          n_overrun[i]               <- sum(n_j[1:i])+n_pipeline[i]-sum(n_j)
          # if(n_overrun[i]<=0)
          #  n_overrun[i]             <-0
        } 
      }
      else
      {
        for(i in 1:(J-1))
        {
          nmax_possible[i]           <- sum(n_j[1:i])+(k_j[i]-1)*sum(nE[(i+1):J])+sum(nC[(i+1):J])
          #nmax_possible[i]           <- sum(n_j[1:i])+(J-i)*n_j[i]
          if(recruitment_type=="Uniform")
          {
            lambda                     <- nmax/recruitment_length
            t_j[i]                     <- sum(n_j[1:i])/lambda
            tmax_possible[i]           <- nmax_possible[i]/lambda
          }
          else if(recruitment_type=="Linear")
          {
            delta                      <- 2*nmax/(recruitment_length*(recruitment_length+1))
            t_j[i]                     <- (-1+sqrt(1+4*2*sum(n_j[1:i])/delta))/2
            tmax_possible[i]           <- (-1+sqrt(1+4*2*nmax_possible[i]/delta))/2
          }
          t_j_tilde[i]               <- t_j[i]+delay
          if(t_j_tilde[i]>=tmax_possible[i])
          {
            #if(k_j[i]==K)
            # t_j_tilde[i]           <- recruitment_length
            #else
            t_j_tilde[i]           <- tmax_possible[i]
          }
          else
            t_j_tilde[i]             <- t_j_tilde[i]
          if(recruitment_type=="Uniform")
            n_pipeline[i]              <- (t_j_tilde[i]-t_j[i])*lambda
          else if (recruitment_type=="Linear")
            n_pipeline[i]              <- 0.5*delta*(t_j_tilde[i]*(t_j_tilde[i]+1)-t_j[i]*(t_j[i]+1))
          n_overrun[i]               <- sum(n_j[1:i])+n_pipeline[i]-sum(n_j)
        } 
        n_pipeline[J]               <-0
        n_overrun[J]                <-0
      }
    }
   
    result                          <- list(n_pipeline=n_pipeline,n_overrun=max(n_overrun)) 
    return(result)
  }
  
  
  if(length(m0)==1)
  {
    n_overrun_uniform                 <- n_overrun_linear      <- numeric(nrow(omega))
    for(j in 1:nrow(omega))
    {
      n_pipeline_uniform[[j]]         <- pipelines(J=J, j=j, delay=m0, recruitment_length=tmax,recruitment_type="Uniform")$n_pipeline
      n_overrun_uniform[j]            <- pipelines(J=J, j=j, delay=m0, recruitment_length=tmax,recruitment_type="Uniform")$n_overrun
      n_pipeline_linear[[j]]          <- pipelines(J=J, j=j, delay=m0, recruitment_length=tmax,recruitment_type="Linear")$n_pipeline
      n_overrun_linear[j]             <- pipelines(J=J, j=j, delay=m0, recruitment_length=tmax,recruitment_type="Linear")$n_overrun
      
    }
    
    
    result                        <- data.frame(omega)
    colnames(result)              <- paste("omega",1:K)
    result$K_Js                   <- sapply(K_Js, round)
    result$n_Js                   <- sapply(n_Js, round)
    result$total_n_Js             <- total_n_Js
    result$final_realised_stage   <- final_realised_stage
    result$stopping_prob_total    <- sapply(stopping_probability,sum)
    #result$stopping_prob_LFC      <- sapply(stopping_probability,sum)
    result$Pipelines_uniform      <- sapply(n_pipeline_uniform, round)
    result$overruns_uniform       <- as.numeric(n_overrun_uniform)
    result$total_recruitment_uni  <- total_n_Js+result$overruns_uniform
    result$Pipelines_linear       <- sapply(n_pipeline_linear, round)
    result$overruns_linear        <- n_overrun_linear
    result$total_recruitment_lin  <- total_n_Js+result$overruns_linear
    #View(result)
    
    result$stopping_prob_total[nrow(omega)]    <- 1-sum(result$stopping_prob_total[1:(nrow(omega)-1)])
    
    
    
    ESS                           <- sum(result$total_n_Js*result$stopping_prob_total)
    ESS_delay_uni                 <- sum(result$total_recruitment_uni*result$stopping_prob_total)
    ESS_delay_lin                 <- sum(result$total_recruitment_lin*result$stopping_prob_total)
    
    return(list(nrow(omega),nrow(psi),nmax,ESS,ESS_delay_uni,ESS_delay_lin,result))
  }
  
  if(length(m0)!=1)
  {
    n_overrun_uniform              <-n_overrun_linear      <-list()
    for(m in 1:length(m0))
    {
      n_pipeline_uniform[[m]]         <-list()
      n_pipeline_linear[[m]]          <-list()
      n_overrun_uniform[[m]]          <-list()
      n_overrun_linear[[m]]           <-list()
      for(j in 1:nrow(omega))
      {
        n_pipeline_uniform[[m]][[j]]         <- round(pipelines(J=J, j=j, delay=m0[m], recruitment_length=tmax,recruitment_type="Uniform")$n_pipeline)
        n_overrun_uniform[[m]][[j]]          <- pipelines(J=J, j=j, delay=m0[m], recruitment_length=tmax,recruitment_type="Uniform")$n_overrun
        n_pipeline_linear[[m]][[j]]          <- round(pipelines(J=J, j=j, delay=m0[m], recruitment_length=tmax,recruitment_type="Linear")$n_pipeline)
        n_overrun_linear[[m]][[j]]           <- pipelines(J=J, j=j, delay=m0[m], recruitment_length=tmax,recruitment_type="Linear")$n_overrun
        
      }
    }
   
    result                        <- data.frame(omega)
    colnames(result)              <- paste("omega",1:K)
    result$K_Js                   <- sapply(K_Js, round)
    result$n_Js                   <- sapply(n_Js, round)
    result$total_n_Js             <- total_n_Js
    result$final_realised_stage   <- final_realised_stage
    result$stopping_prob_total    <- sapply(stopping_probability,sum)
    result                        <- do.call("rbind",replicate(length(m0),result,simplify=FALSE))
    result$Pipelines_uniform      <- flatten(n_pipeline_uniform)
    result$overruns_uniform       <- as.numeric(flatten(n_overrun_uniform))
    result$total_recruitment_uni  <- result$total_n_Js+result$overruns_uniform
    result$Pipelines_linear       <- flatten(n_pipeline_linear)
    result$overruns_linear        <- as.numeric(flatten(n_overrun_linear))
    result$total_recruitment_lin  <- result$total_n_Js+result$overruns_linear
   
    
    ESS_delay_uni                 <- ESS_delay_lin               <-ESS  <-numeric(length(m0))
    for(i in 1: length(m0))
    {
      #index                         <- i+length(m0)*c(1:nrow(omega)-1)
      index                         <- (1+(i-1)*nrow(omega)):(i*nrow(omega))
      ESS[i]                        <- sum(result$total_n_Js[index]*result$stopping_prob_total[index])
      ESS_delay_uni[i]              <- sum(result$total_recruitment_uni[index]*result$stopping_prob_total[index])
      ESS_delay_lin[i]              <- sum(result$total_recruitment_lin[index]*result$stopping_prob_total[index])
      
    }
    
    return(list(nrow(omega),nrow(psi),nmax,ESS,ESS_delay_uni,ESS_delay_lin))
  }
  
}



#=====================================Example=====================================================================================

K=2
J=3

spacing=c(0.5,0.75,1)
simulating(K,J,0.5,spacing,"conjunctive","All treatment effective",36,c(0,6,12,18,24,30,36))


spacing=c(0.5,0.75,1)
unequal=simulating(K,J,0.5,spacing,"conjunctive","All treatment effective",36,12)[[7]]

spacing=c(1/3,2/3,1)
equal=simulating(K,J,0.5,spacing,"conjunctive","All treatment effective",36,12)[[7]]


